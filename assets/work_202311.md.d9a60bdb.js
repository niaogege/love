import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.1c4cfb46.js";const u=JSON.parse('{"title":"202311","description":"","frontmatter":{},"headers":[],"relativePath":"work/202311.md","filePath":"work/202311.md"}'),p={name:"work/202311.md"},o=l(`<h1 id="_202311" tabindex="-1">202311 <a class="header-anchor" href="#_202311" aria-label="Permalink to &quot;202311&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>不知道路在哪里？路在脚下，可脚下却无路可走</p><blockquote><p>20231101</p></blockquote></div><h2 id="_1101" tabindex="-1">1101 <a class="header-anchor" href="#_1101" aria-label="Permalink to &quot;1101&quot;">​</a></h2><ul><li>react 版本的元素露出与隐藏以及<strong>IntersectionObserver</strong> API</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ExposeRef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRef</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IntersectionObserver</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      (</span><span style="color:#FFAB70;">entries</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        entries.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(({ </span><span style="color:#FFAB70;">intersectionRatio</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">target</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (intersectionRatio </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">_target</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> target </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HTMLImageElement</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ids</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _target.dataset.expose </span><span style="color:#F97583;">??</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(ids, </span><span style="color:#9ECBFF;">&quot;ids&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">setShowIndex</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">ids);</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        });</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        root: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        threshold: </span><span style="color:#79B8FF;">0.7</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">useEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">exposeRef</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ExposeRef.current;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">everyItems</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">querySelectorAll</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[data-expose]&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (everyItems </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> everyItems.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(everyItems).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (item) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          exposeRef.</span><span style="color:#B392F0;">observe</span><span style="color:#E1E4E8;">(item);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      exposeRef.</span><span style="color:#B392F0;">disconnect</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, []);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ExposeRef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRef</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IntersectionObserver</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      (</span><span style="color:#E36209;">entries</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        entries.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(({ </span><span style="color:#E36209;">intersectionRatio</span><span style="color:#24292E;">, </span><span style="color:#E36209;">target</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (intersectionRatio </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.5</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">_target</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> target </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLImageElement</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ids</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _target.dataset.expose </span><span style="color:#D73A49;">??</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(ids, </span><span style="color:#032F62;">&quot;ids&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">setShowIndex</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">ids);</span></span>
<span class="line"><span style="color:#24292E;">          }</span></span>
<span class="line"><span style="color:#24292E;">        });</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        root: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        threshold: </span><span style="color:#005CC5;">0.7</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">useEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">exposeRef</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ExposeRef.current;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">everyItems</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">querySelectorAll</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[data-expose]&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (everyItems </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> everyItems.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(everyItems).</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (item) {</span></span>
<span class="line"><span style="color:#24292E;">          exposeRef.</span><span style="color:#6F42C1;">observe</span><span style="color:#24292E;">(item);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      exposeRef.</span><span style="color:#6F42C1;">disconnect</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"><span style="color:#24292E;">  }, []);</span></span></code></pre></div><ul><li>js 正则表达式利用</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">str.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">(</span><span style="color:#85E89D;font-weight:bold;">\\?</span><span style="color:#DBEDFF;">age=)(12</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">57)</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;age=28&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">str.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">/(</span><span style="color:#22863A;font-weight:bold;">\\?</span><span style="color:#032F62;">age=)(12</span><span style="color:#D73A49;">|</span><span style="color:#032F62;">57)/</span><span style="color:#D73A49;">g</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;age=28&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="browserslist-原理" tabindex="-1"><a href="https://mp.weixin.qq.com/s/js85Lq4mU2XB3pFSuUKhag" target="_blank" rel="noreferrer">browserslist 原理</a> <a class="header-anchor" href="#browserslist-原理" aria-label="Permalink to &quot;[browserslist 原理](https://mp.weixin.qq.com/s/js85Lq4mU2XB3pFSuUKhag)&quot;">​</a></h3><p>browserslist[2] 用特定的语句来查询浏览器列表，如 last 2 Chrome versions。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npx browserslist </span><span style="color:#9ECBFF;">&quot;last 2 Chrome versions&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npx browserslist </span><span style="color:#032F62;">&quot;last 2 Chrome versions&quot;</span></span></code></pre></div><p>细说起来，「它是现代前端工程化不可或缺的工具，无论是处理 JS 的 babel，还是处理 CSS 的 postcss，凡是与垫片相关的，他们背后都有 browserslist 的身影。」</p><ul><li>babel，在 <strong>@babel/preset-env</strong> 中使用 core-js 作为垫片</li><li>postcss 使用 <strong>autoprefixer</strong> 作为垫片</li></ul><p>关于前端打包体积与垫片关系，我们有以下几点共识:</p><ul><li>由于低浏览器版本的存在，垫片是必不可少的</li><li>垫片越少，则打包体积越小</li><li>浏览器版本越新，则垫片越少</li><li>那在前端工程化实践中，当我们确认了浏览器版本号，那么它的垫片体积就会确认。</li></ul><p>假设项目只需要支持最新的两个谷歌浏览器。那么关于 browserslist 的查询，可以写作 last 2 Chrome versions。</p><p>而随着时间的推移，「该查询语句将会返回更新的浏览器，垫片体积便会减小。」</p><h4 id="谈一下-browserslist-的原理" tabindex="-1">谈一下 browserslist 的原理 <a class="header-anchor" href="#谈一下-browserslist-的原理" aria-label="Permalink to &quot;谈一下 browserslist 的原理&quot;">​</a></h4><p>browserslist 根据正则解析查询语句，对浏览器版本数据库 <strong>caniuse-lite</strong> 进行查询，返回所得的浏览器版本列表。</p><h4 id="一些常用的查询语法" tabindex="-1">一些常用的查询语法 <a class="header-anchor" href="#一些常用的查询语法" aria-label="Permalink to &quot;一些常用的查询语法&quot;">​</a></h4><ul><li>浏览器版本号： Chrome &gt; 90: Chrome 大于 90 版本号的浏览器</li><li>根据最新浏览器版本</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">last </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">versions</span><span style="color:#E1E4E8;">: 所有浏览器的最新两个版本</span></span>
<span class="line"><span style="color:#E1E4E8;">last </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> Chrome </span><span style="color:#B392F0;">versions</span><span style="color:#E1E4E8;">: Chrome 浏览器的最新两个版本</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">last </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">versions</span><span style="color:#24292E;">: 所有浏览器的最新两个版本</span></span>
<span class="line"><span style="color:#24292E;">last </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> Chrome </span><span style="color:#6F42C1;">versions</span><span style="color:#24292E;">: Chrome 浏览器的最新两个版本</span></span></code></pre></div><ul><li>根据用户份额:</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;">: 在全球用户份额大于 </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> 的浏览器</span></span>
<span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CN</span><span style="color:#E1E4E8;">: 在中国用户份额大于 </span><span style="color:#79B8FF;">5</span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> 的浏览器</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">%</span><span style="color:#24292E;">: 在全球用户份额大于 </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> 的浏览器</span></span>
<span class="line"><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CN</span><span style="color:#24292E;">: 在中国用户份额大于 </span><span style="color:#005CC5;">5</span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> 的浏览器</span></span></code></pre></div><h2 id="_1102" tabindex="-1">1102 <a class="header-anchor" href="#_1102" aria-label="Permalink to &quot;1102&quot;">​</a></h2><ul><li>每个 js 对象都有 toString()方法,单纯的数字.toString(16)会报语法错误</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">16.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// Uncaught SyntaxError: Invalid or unexpected token</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> test </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> text1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> test.</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(text1)</span></span>
<span class="line"><span style="color:#6A737D;">// 10 ok</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">16.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6A737D;">// Uncaught SyntaxError: Invalid or unexpected token</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> test </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> text1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> test.</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(text1)</span></span>
<span class="line"><span style="color:#6A737D;">// 10 ok</span></span></code></pre></div><ul><li>好文推荐<a href="https://mp.weixin.qq.com/s/Ptxs-3d_cSb4SrC4bhO2Ig" target="_blank" rel="noreferrer">浏览器和图形引擎渲染对比</a></li></ul><h2 id="_1103-1104" tabindex="-1">1103/1104 <a class="header-anchor" href="#_1103-1104" aria-label="Permalink to &quot;1103/1104&quot;">​</a></h2><h3 id="三分钟-教你-3-种前端埋点方式" tabindex="-1"><a href="https://mp.weixin.qq.com/s/ff5HxRcnADy34p_zArzq8A" target="_blank" rel="noreferrer">三分钟，教你 3 种前端埋点方式！</a> <a class="header-anchor" href="#三分钟-教你-3-种前端埋点方式" aria-label="Permalink to &quot;[三分钟，教你 3 种前端埋点方式！](https://mp.weixin.qq.com/s/ff5HxRcnADy34p_zArzq8A)&quot;">​</a></h3><h2 id="_1105" tabindex="-1">1105 <a class="header-anchor" href="#_1105" aria-label="Permalink to &quot;1105&quot;">​</a></h2><ul><li>年底了 各地都在裁员，如何让自己处于主动点呢，唯有周末好好复习</li><li>一周花 500，一个月需要花掉 2000，加上房租 2500，房贷 6200，一个月最基本的开销都要 10700，我的妈呀，4500+2800 = 7300</li></ul><h2 id="_1106-1107" tabindex="-1">1106/1107 <a class="header-anchor" href="#_1106-1107" aria-label="Permalink to &quot;1106/1107&quot;">​</a></h2><ul><li><a href="https://maimai.cn/n/content/global-topic?circle_type=9&amp;topic_id=k50Jr4hl&amp;_share_channel=wechat&amp;share_from=wx" target="_blank" rel="noreferrer">字节 PICO 裁员</a>，心有不甘</li><li><a href="https://mp.weixin.qq.com/s/huyn95OyOz45J93B3WGXdA" target="_blank" rel="noreferrer">谈谈 node 架构中的线程进程的应用场景、事件循环及任务队列</a></li><li>学会使用<a href="https://www.yuque.com/hyj1991/easy-monitor/deployment" target="_blank" rel="noreferrer">easy-monitor</a></li></ul><h2 id="_1108-1109" tabindex="-1">1108/1109 <a class="header-anchor" href="#_1108-1109" aria-label="Permalink to &quot;1108/1109&quot;">​</a></h2><ul><li>当你要覆写某个原生方法时，为了防止他已经被其他库覆写（这样你覆写的就不是原生的那个），可以从 iframe 里取（比如图中取 Array.from） 这个方法是从@sodatea 的一个 issue 中看到的 (from 卡颂)</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iframe</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(document, </span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;iframe&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iframeArray</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> iframe.contentwindow.Array;</span></span>
<span class="line"><span style="color:#E1E4E8;">document.body.</span><span style="color:#B392F0;">removeChild</span><span style="color:#E1E4E8;">(iframe);</span></span>
<span class="line"><span style="color:#E1E4E8;">Array.from </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> iframeArray.from;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iframe</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.body.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(document, </span><span style="color:#6F42C1;">createElement</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;iframe&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iframeArray</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> iframe.contentwindow.Array;</span></span>
<span class="line"><span style="color:#24292E;">document.body.</span><span style="color:#6F42C1;">removeChild</span><span style="color:#24292E;">(iframe);</span></span>
<span class="line"><span style="color:#24292E;">Array.from </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> iframeArray.from;</span></span></code></pre></div><ul><li><a href="https://mp.weixin.qq.com/s/YuelqFfTPG58-_uXsptK6Q" target="_blank" rel="noreferrer">让 CSS 官方后悔的一些决定</a></li><li><a href="https://mp.weixin.qq.com/s/LotI0aQbJtBZHVgQH2bVBg" target="_blank" rel="noreferrer">应用题</a></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  { userId: </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">, title: </span><span style="color:#9ECBFF;">&quot;title1&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { userId: </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">, title: </span><span style="color:#9ECBFF;">&quot;other&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { userId: </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">, title: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  { userId: </span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;">, title: </span><span style="color:#9ECBFF;">&quot;title2&quot;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 查找data中，符合where中条件的数据，并根据orderBy中的条件进行排序</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">find</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">where</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    title:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">\\d</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 这里意思是过滤出数组中，满足title字段中符合 /\\d$/的项</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">orderBy</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;userId&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;desc&quot;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 这里的意思是对数组中的项按照userId进行倒序排列</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//=&gt; 返回 [{ userId: 19, title: &#39;title2&#39;}, { userId: 8, title: &#39;title1&#39; }];</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(result.value);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">data</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  { userId: </span><span style="color:#005CC5;">8</span><span style="color:#24292E;">, title: </span><span style="color:#032F62;">&quot;title1&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { userId: </span><span style="color:#005CC5;">11</span><span style="color:#24292E;">, title: </span><span style="color:#032F62;">&quot;other&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { userId: </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">, title: </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  { userId: </span><span style="color:#005CC5;">19</span><span style="color:#24292E;">, title: </span><span style="color:#032F62;">&quot;title2&quot;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 查找data中，符合where中条件的数据，并根据orderBy中的条件进行排序</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">result</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">find</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">where</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    title:</span><span style="color:#032F62;"> /</span><span style="color:#005CC5;">\\d</span><span style="color:#D73A49;">$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 这里意思是过滤出数组中，满足title字段中符合 /\\d$/的项</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">orderBy</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;userId&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;desc&quot;</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 这里的意思是对数组中的项按照userId进行倒序排列</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//=&gt; 返回 [{ userId: 19, title: &#39;title2&#39;}, { userId: 8, title: &#39;title1&#39; }];</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(result.value);</span></span></code></pre></div><h2 id="_1110" tabindex="-1">1110 <a class="header-anchor" href="#_1110" aria-label="Permalink to &quot;1110&quot;">​</a></h2><ul><li>写一个健康检查的中间件</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">share</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">healthcheck</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(ctx.path)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    ctx.body </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;healthcheck success&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">, </span><span style="color:#E36209;">next</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#032F62;">/share</span><span style="color:#22863A;font-weight:bold;">\\/</span><span style="color:#032F62;">healthcheck/</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(ctx.path)) {</span></span>
<span class="line"><span style="color:#24292E;">    ctx.body </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;healthcheck success&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="_1113" tabindex="-1">1113 <a class="header-anchor" href="#_1113" aria-label="Permalink to &quot;1113&quot;">​</a></h2><ul><li><a href="https://prisma.yoga/getting-started/quickstart" target="_blank" rel="noreferrer">Prisma：作为迁移和数据库访问的 ORM?</a><blockquote><p>Prisma 和 ROM 完全不懂</p></blockquote></li><li>解释下 orm?</li></ul><blockquote><p>ORM，全称为 Object-Relational Mapping，即对象关系映射，是一种编程技术，用于将数据库中的数据转换为对象，以便在编程语言中使用。它是一种设计模式，用于在关系数据库管理系统（RDBMS）和面向对象编程语言之间建立映射。</p></blockquote><p>ORM 的主要目标是消除在数据库和编程语言之间转换数据时的差异。它允许开发人员使用他们熟悉的编程语言来操作数据库，而不需要直接编写 SQL 语句。这样可以提高开发效率，同时也可以减少因为手动编写 SQL 语句而引发的错误。</p><ul><li>重启 mysql 数据库</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">systemctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mysqld</span></span>
<span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">systemctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stop</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mysqld</span></span>
<span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">systemctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">restart</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mysqld</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 远程直连</span></span>
<span class="line"><span style="color:#B392F0;">mysql</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-h</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">111.230</span><span style="color:#9ECBFF;">.199.157</span><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">-u</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-P</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3306</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">mysql</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-h</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">111.230</span><span style="color:#9ECBFF;">.199.157</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-u</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--port=3306</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 监听端口</span></span>
<span class="line"><span style="color:#B392F0;">netstat</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-lnp</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">grep</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mysql</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># check  MySQL服务是否正常</span></span>
<span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">systemctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">status</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mysqld.service</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">systemctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysqld</span></span>
<span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">systemctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stop</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysqld</span></span>
<span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">systemctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">restart</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysqld</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 远程直连</span></span>
<span class="line"><span style="color:#6F42C1;">mysql</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-h</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">111.230</span><span style="color:#032F62;">.199.157</span><span style="color:#24292E;">  </span><span style="color:#005CC5;">-u</span><span style="color:#24292E;"> </span><span style="color:#032F62;">root</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-P</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3306</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">mysql</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-h</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">111.230</span><span style="color:#032F62;">.199.157</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-u</span><span style="color:#24292E;"> </span><span style="color:#032F62;">root</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--port=3306</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 监听端口</span></span>
<span class="line"><span style="color:#6F42C1;">netstat</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-lnp</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">grep</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysql</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># check  MySQL服务是否正常</span></span>
<span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">systemctl</span><span style="color:#24292E;"> </span><span style="color:#032F62;">status</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysqld.service</span></span></code></pre></div><h2 id="_1114" tabindex="-1">1114 <a class="header-anchor" href="#_1114" aria-label="Permalink to &quot;1114&quot;">​</a></h2><ul><li><p><a href="https://mp.weixin.qq.com/s/66_ssrmZpzeddm3FugiMFQ" target="_blank" rel="noreferrer">如何计算 FCP 白屏时间和 LCP 首屏渲染，或者叫最大内容渲染</a></p></li><li><p><a href="https://juejin.cn/post/6844904097556987917?searchId=20231114123334A56242829EC283CB5BDE#heading-6" target="_blank" rel="noreferrer">阿里前端攻城狮们写了一份前端面试题答案，请查收</a></p></li><li><p><a href="https://juejin.cn/post/7299696650896080922" target="_blank" rel="noreferrer">北京七年前端带专找工作竟如此坎坷？近一个月面试复盘（附总结答案），快来学习呀</a></p></li><li><p>蓝色时间线 DOMContentLoaded 表示 DOM 加载完成， 红色时间线 表示页面上所有声明的资源加载完成的时间。</p></li><li><p><a href="https://juejin.cn/post/7239715295484690493" target="_blank" rel="noreferrer">分享我所经历的&quot;金三银四&quot;，以及我被问到的 135 道面试题~</a></p></li><li><p>手写代码题</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 1.数组排平</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flatten</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">list</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">level</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">array</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]], </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">], </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flatten</span><span style="color:#E1E4E8;">(array);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">list2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flatten</span><span style="color:#E1E4E8;">(array, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(list1); </span><span style="color:#6A737D;">// [1, 2, 3, 4, 5, 3, -4]</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(list2); </span><span style="color:#6A737D;">// [1, 2, 3, 4, [5], 3, -4]</span></span>
<span class="line"><span style="color:#6A737D;">// 2.实现实例</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">myPromise</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(val);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delay</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">duration</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reject</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(val);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }, duration);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#B392F0;">myPromise</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`hello\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">delay</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(val)); </span><span style="color:#6A737D;">// 一秒之后输出 hello</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 1.数组排平</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flatten</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">list</span><span style="color:#24292E;">, </span><span style="color:#E36209;">level</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">array</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]], </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">], </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flatten</span><span style="color:#24292E;">(array);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">list2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flatten</span><span style="color:#24292E;">(array, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(list1); </span><span style="color:#6A737D;">// [1, 2, 3, 4, 5, 3, -4]</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(list2); </span><span style="color:#6A737D;">// [1, 2, 3, 4, [5], 3, -4]</span></span>
<span class="line"><span style="color:#6A737D;">// 2.实现实例</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">myPromise</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(val);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delay</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">duration</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">, </span><span style="color:#E36209;">reject</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(val);</span></span>
<span class="line"><span style="color:#24292E;">      }, duration);</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#6F42C1;">myPromise</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`hello\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">delay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">((</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(val)); </span><span style="color:#6A737D;">// 一秒之后输出 hello</span></span></code></pre></div><h2 id="_1115" tabindex="-1">1115 <a class="header-anchor" href="#_1115" aria-label="Permalink to &quot;1115&quot;">​</a></h2><ul><li><p><a href="https://www.aliyun.com/lowcode/promotion/allinaliyun/99program?spm=5176.8789780.J_3965641470.1.f26939fbjpgdzZ" target="_blank" rel="noreferrer">阿里云 ESC</a></p><blockquote><p>991 年 不知道要不要买</p></blockquote></li><li><p>npm 包中的语义版本，**~、&gt;、^**符号各代表什么 <strong>版本规范：主版本号.次版本号.补丁版本号</strong> 主版本号：仅当程序发生了重大变化时才会增长，如新增了重要功能、新增了大量的 API、技术架构发生了重大变化 次版本号：仅当程序发生了一些小变化时才会增长，如新增了一些小功能、新增了一些辅助型的 API 补丁版本号：仅当解决了一些 bug 或 进行了一些局部优化时更新，如修复了某个函数的 bug、提升了某个函数的运行效率</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">x	不固定的版本号 	</span><span style="color:#79B8FF;">1.3</span><span style="color:#E1E4E8;">.x	只要保证主版本号是1，次版本号是3即可</span></span>
<span class="line"><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">	补丁版本号可增	</span><span style="color:#F97583;">~</span><span style="color:#79B8FF;">1.3</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">	保证主版本号是1，次版本号是3，补丁版本号大于等于4</span></span>
<span class="line"><span style="color:#F97583;">^</span><span style="color:#E1E4E8;">	此版本和补丁版本可增	</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">1.3</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">	保证主版本号是1，次版本号可以大于等于3，补丁版本号可以大于等于4 </span></span>
<span class="line"><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">	最新版本 	</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">	始终安装最新版本</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">x	不固定的版本号 	</span><span style="color:#005CC5;">1.3</span><span style="color:#24292E;">.x	只要保证主版本号是1，次版本号是3即可</span></span>
<span class="line"><span style="color:#D73A49;">~</span><span style="color:#24292E;">	补丁版本号可增	</span><span style="color:#D73A49;">~</span><span style="color:#005CC5;">1.3</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">	保证主版本号是1，次版本号是3，补丁版本号大于等于4</span></span>
<span class="line"><span style="color:#D73A49;">^</span><span style="color:#24292E;">	此版本和补丁版本可增	</span><span style="color:#D73A49;">^</span><span style="color:#005CC5;">1.3</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">	保证主版本号是1，次版本号可以大于等于3，补丁版本号可以大于等于4 </span></span>
<span class="line"><span style="color:#D73A49;">*</span><span style="color:#24292E;">	最新版本 	</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">	始终安装最新版本</span></span></code></pre></div>`,53),e=[o];function t(c,r,E,y,i,F){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};

import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.BgnOoXVk.js";const y=JSON.parse('{"title":"202404","description":"","frontmatter":{},"headers":[],"relativePath":"work/2024/202404.md","filePath":"work/2024/202404.md"}'),l={name:"work/2024/202404.md"},t=n(`<h1 id="_202404" tabindex="-1">202404 <a class="header-anchor" href="#_202404" aria-label="Permalink to &quot;202404&quot;">​</a></h1><p>每一个人都有不一样的闪光点,所以要找到属于自己的那一片麦田,然后挥酒汗水,彻彻底底的完成自我实现?</p><blockquote><p>so,我的麦田在哪里？</p></blockquote><div class="info custom-block"><p class="custom-block-title">INFO</p><blockquote><p>春暖花开 万物复苏 20240222</p></blockquote><blockquote><p>横亘在前面的两座大山都解决的怎么样了</p></blockquote><blockquote><p>天天手写，总得有点思考吧，不能老是一成不变，死记硬背</p></blockquote></div><h2 id="_0401" tabindex="-1">0401 <a class="header-anchor" href="#_0401" aria-label="Permalink to &quot;0401&quot;">​</a></h2><ul><li>1027 天,64</li><li>浏览 2 个 npm 仓库，<a href="https://react-dnd.github.io/react-dnd/about" target="_blank" rel="noreferrer">React DnD</a>和 <a href="https://www.npmjs.com/package/immutability-helper" target="_blank" rel="noreferrer">immutability-helper</a></li><li>一天天的，也不知道自己想做什么，乱的很，想做小程序，做了那么久，啥也没产出，为啥这么懒</li><li>获取页面的 html 有多少个标签</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelectorAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ele</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ele.tagName)).size</span></span></code></pre></div><h2 id="_0402" tabindex="-1">0402 <a class="header-anchor" href="#_0402" aria-label="Permalink to &quot;0402&quot;">​</a></h2><ul><li>1028,63</li><li>面试经验积累小程序已经开始，现在手忙脚乱，一会接口，一会前端，一会设计，都不知道自己要忙啥。这两天先忙着接口开发和设计</li><li>前端 pc 页面展示+小程序端页面展示+用户登录</li></ul><h2 id="_0403" tabindex="-1">0403 <a class="header-anchor" href="#_0403" aria-label="Permalink to &quot;0403&quot;">​</a></h2><ul><li>1029,64</li><li>Nestjs 还是这么菜，看不懂大佬们写的逻辑，后端服务这块写的太少了，羡慕大佬 <a href="https://github.com/zclzone/isme-nest-serve" target="_blank" rel="noreferrer">isme-nest-serve</a></li><li><a href="https://juejin.cn/post/7244818201976078394?searchId=202404031810020A05F10C7266198C3445" target="_blank" rel="noreferrer">unocss</a></li><li>需要学习的内容有：vue3+pinia+unocss+nestjs</li><li>最近先把前端所需的服务端上线</li><li>为了写好自己的接口，不得不继续学习 nestjs+prisma/typeorm，只要干不死就往死里干</li></ul><h2 id="_0404" tabindex="-1">0404 <a class="header-anchor" href="#_0404" aria-label="Permalink to &quot;0404&quot;">​</a></h2><ul><li>1030，63</li><li>最近面试系列暂停，需要紧急支持下服务端接口这块，不然怎么成为全栈工程师</li></ul><h2 id="_0405" tabindex="-1">0405 <a class="header-anchor" href="#_0405" aria-label="Permalink to &quot;0405&quot;">​</a></h2><ul><li>1031,62</li><li>人总要干成一件事，不然跟废物有啥区别，我最近就要把服务端接口写好，完成最基本的增删改查</li><li>dto.ts 和 entity.ts 两种类型文件是做什么用的</li><li>微信小程序如何隐藏右上角的胶囊按钮？</li><li><a href="https://www.cnblogs.com/maqingyuan/p/16574219.html" target="_blank" rel="noreferrer">使用 xshell linux 安装 nodejs,CentOS 下安装并配置 nodejs 环境教程</a></li><li><a href="https://nodejs.org/en/download/package-manager" target="_blank" rel="noreferrer">nvm</a></li><li>linux 中如何设置软连接</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-bash-4.2#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">v16.16.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-bash-4.2#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">8.11.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/node/bin/node </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/node</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ln</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/node/bin/npm </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/npm</span></span></code></pre></div><h2 id="_0406" tabindex="-1">0406 <a class="header-anchor" href="#_0406" aria-label="Permalink to &quot;0406&quot;">​</a></h2><ul><li><p>1032,61</p></li><li><p><a href="https://juejin.cn/post/7281570246111576120?searchId=202404061303234D363E19D3DDF005014F" target="_blank" rel="noreferrer">NestJS 学习之优秀项目分析与最佳实践</a></p></li><li><p>DTO（Data Transfer Object）: 数据传输对象，主要目的是转换和验证数据用的，主要在路由控制器中使用。一般是结合<a href="https://www.npmjs.com/package/class-validator" target="_blank" rel="noreferrer">class-validator</a>使用</p><blockquote><p>还是没理解？</p></blockquote></li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>DTO=Data Transfer Object。Dto 和接口有些类似，但是它的主要目的是为了转换和验证数据。他们基本上在路由控制中被使用。 您可以他们简化您的 API 内容（body）和请求验证逻辑。例如，AuthDto 自动的整合用户的 email 和 password 进一个 dto 对象进行强制验证。</p></div><ul><li>Nestjs 中的依赖注入原理怎么描述和解释</li></ul><h2 id="_0407" tabindex="-1">0407 <a class="header-anchor" href="#_0407" aria-label="Permalink to &quot;0407&quot;">​</a></h2><ul><li>1033,60</li><li>typescript 项目中 tsconfig 设置别名</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>在 TypeScript 项目中，tsconfig.json 文件用于配置 TypeScript 编译器的选项。通过设置别名（paths），我们可以简化模块导入的路径，使其更加清晰易读，同时也可以解决一些模块解析的问题。</p><p>要在 tsconfig.json 中设置别名，你需要在 compilerOptions 对象中使用 paths 属性。paths 属性是一个对象，其中的键是路径的别名（例如 @components/*），值是一个包含具体路径的数组。下面是如何设置别名的一个例子：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;baseUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里设置基础路径，所有相对路径都是基于这个路径</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;paths&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;@components/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/components/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;@services/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/services/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;@utils/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/utils/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;@constants/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/constants/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;@models/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/models/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><h2 id="_0408" tabindex="-1">0408 <a class="header-anchor" href="#_0408" aria-label="Permalink to &quot;0408&quot;">​</a></h2><ul><li>1034，59</li><li>sse 是什么？</li></ul><details class="details custom-block"><summary>Details</summary><p>SSE（Server-Sent Events）是一种允许服务器主动向客户端发送信息的技术。与传统的 HTTP 请求不同，SSE 在客户端建立一个到服务器的单向连接，服务器可以通过这个连接随时发送数据更新。</p></details><ul><li><p><a href="https://docs.nestjs.cn/10/techniques?id=%e5%85%b3%e7%b3%bb" target="_blank" rel="noreferrer">数据库中的关系，关系是指两个或多个表之间的联系。关系基于每个表中的常规字段，通常包含主键和外键。</a></p></li><li><p><a href="https://docs.nestjs.cn/10/techniques?id=%e6%95%b0%e6%8d%ae%e5%ba%93" target="_blank" rel="noreferrer">typeorm 和 nestjs 结合：增删改查</a></p></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Injectable } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@nestjs/common&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { InjectRepository } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@nestjs/typeorm&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Repository } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;typeorm&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { CreateUserDto } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./dto/create-user.dto&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { User } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./user.entity&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Injectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UsersService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InjectRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(User)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> usersRepository</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Repository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createUserDto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateUserDto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user.firstName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> createUserDto.firstName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user.lastName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> createUserDto.lastName</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.usersRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.usersRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  findOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.usersRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findOneBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ id: id })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.usersRepository.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_0409" tabindex="-1">0409 <a class="header-anchor" href="#_0409" aria-label="Permalink to &quot;0409&quot;">​</a></h2><ul><li><p>1035, 58</p></li><li><p>nestjs 项目中的@nestjs/passport passport passport-local 分别有什么用</p></li><li><p>nestjs 项目中，对于参数定义，不能这么定义,这样对于控制器来说已哪个为准？</p></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UserController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    private userService: Uservice</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;:username&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  findByUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;username&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) username: string) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.userService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findByUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;:id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  findByUserId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) id: number) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.userService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_0410" tabindex="-1">0410 <a class="header-anchor" href="#_0410" aria-label="Permalink to &quot;0410&quot;">​</a></h2><ul><li><p>1036,57</p></li><li><p>@JoinTale 和@JoinColumn 区别是啥？</p></li><li><p><a href="https://www.typeorm.org/relations-faq" target="_blank" rel="noreferrer">如何创建自引用关系</a></p></li></ul><blockquote><p>分类可以嵌套其他分类，嵌套分类可以嵌套其他分类</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Entity,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  PrimaryGeneratedColumn,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Column,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ManyToOne,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  OneToMany,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;typeorm&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Entity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Permission</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PrimaryGeneratedColumn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ManyToOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Permission, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">permission</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> permission.children, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    createForeignKeyConstraints: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  parent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Permission</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OneToMany</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Permission, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">permission</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> permission.parent, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    createForeignKeyConstraints: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  children</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Permission</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_0411" tabindex="-1">0411 <a class="header-anchor" href="#_0411" aria-label="Permalink to &quot;0411&quot;">​</a></h2><ul><li>1037，56</li></ul><h3 id="微信静默授权-snsapi-base-和非静默授权-snsapi-userinfo-区别" tabindex="-1">微信静默授权(snsapi_base)和非静默授权(snsapi_userinfo)区别 <a class="header-anchor" href="#微信静默授权-snsapi-base-和非静默授权-snsapi-userinfo-区别" aria-label="Permalink to &quot;微信静默授权(snsapi_base)和非静默授权(snsapi_userinfo)区别&quot;">​</a></h3><blockquote><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noreferrer">官网文档</a></p></blockquote><ul><li>静默授权：只用来获取用户的 <strong>openid</strong>（用户相对于该服务号的唯一标识），<strong>用户不感知</strong>。并且是静默授权并自动跳转到回调页的。用户感知的就是直接进入了回调页（往往是业务页面）</li><li>非静默授权：用来获取用户的基本信息的。但这种授权需要<strong>用户手动同意</strong>，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。</li><li>用户管理类接口中的“获取用户基本信息接口”，是在用户和公众号产生消息交互或关注后事件推送后，才能根据用户 OpenID 来获取用户基本信息。这个接口，包括其他微信接口，都是需要该用户（即 openid）关注了公众号后，才能调用成功的。</li></ul><h3 id="微信里-unionid-机制" tabindex="-1">微信里 UnionID 机制 <a class="header-anchor" href="#微信里-unionid-机制" aria-label="Permalink to &quot;微信里 UnionID 机制&quot;">​</a></h3><ul><li><p>请注意，网页授权获取用户基本信息也遵循 UnionID 机制。即如果开发者有在多个公众号，或在公众号、移动应用之间统一用户账号的需求，需要前往微信开放平台（open.weixin.qq.com）绑定公众号后，才可利用 UnionID 机制来满足上述需求。</p></li><li><p>UnionID 机制的作用说明：如果开发者拥有多个移动应用、网站应用和公众账号，可通过获取用户基本信息中的 unionid 来区分用户的唯一性，因为同一用户，对同一个微信开放平台下的不同应用（移动应用、网站应用和公众账号），unionid 是相同的。</p></li><li><p><strong>forRootAsync</strong> 使用了 TypeORM 的异步工程模式，这样可以解决 imports 的顺序问题，也就是说，使用了 forRootAsync，可以不用在意 imports 这个数组中使用 TypeOrmModule 的顺序，可以任意放，不用在意其他模块引入的顺序</p></li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { TypeOrmModule } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@nestjs/typeorm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  imports: [ TypeOrmModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forRootAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({})],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  controllers: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  providers: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h2 id="_0412" tabindex="-1">0412 <a class="header-anchor" href="#_0412" aria-label="Permalink to &quot;0412&quot;">​</a></h2><ul><li>1038，55</li><li>每天都是煎熬，最难过的莫过于表演，而我又不喜欢表演。</li><li>降低一切无效社交，老老实实敲代码，搬砖</li><li>“有一个夜晚我烧毁了所有的记忆，从此我的梦就透明了；有一个早晨我扔掉了所有的昨天，从此我的脚步就轻盈了。——泰戈尔”</li></ul><h2 id="_0413-0414" tabindex="-1">0413/0414 <a class="header-anchor" href="#_0413-0414" aria-label="Permalink to &quot;0413/0414&quot;">​</a></h2><ul><li>1040，53</li><li>认清自己，谦卑一点，发表意见的时候，仅供参考，多以数据和事实说话，还有就是自己那么忙，没有时间去处理琐事，还是不能放弃学习</li><li>大模型能专注于只做某一领域吗，做深做透，比如高考规划，利用大模型，打破信息差，什么学校的强基政策以及高校专项计划等各种政策解读，让各种高考规划师面临失业，再比如保险领域，买什么保险是否需要保险等等</li><li><a href="https://typeorm.biunav.com/zh/find-options.html#%E8%BF%9B%E9%98%B6%E9%80%89%E9%A1%B9" target="_blank" rel="noreferrer">typeorm 进阶查询</a></li></ul><h2 id="_0415" tabindex="-1">0415 <a class="header-anchor" href="#_0415" aria-label="Permalink to &quot;0415&quot;">​</a></h2><ul><li>1041，52</li><li>TypeORM 中的 Like 和 ILike 运算符都用于模糊查询，但它们的区别在于对<strong>大小写</strong>的敏感性。</li></ul><p>Like 运算符是区分大小写的。例如，使用 Like &#39;%abc%&#39; 查询时，只会匹配包含 abc 的记录，而不会匹配包含 Abc、ABC 等大小写不同的字符串。</p><p>ILike 运算符是不区分大小写的。例如，使用 ILike &#39;%abc%&#39; 查询时，会匹配包含 abc、Abc、ABC 等字符串，无论大小写如何。</p>`,51),h=[t];function p(e,k,r,E,d,o){return a(),i("div",null,h)}const c=s(l,[["render",p]]);export{y as __pageData,c as default};

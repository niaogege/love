import{_ as e,c as l,o as i,ag as s}from"./chunks/framework.CDhRSyRB.js";const u=JSON.parse('{"title":"202411","description":"","frontmatter":{},"headers":[],"relativePath":"work/2024/202411.md","filePath":"work/2024/202411.md"}'),t={name:"work/2024/202411.md"};function o(n,a,r,c,p,d){return i(),l("div",null,a[0]||(a[0]=[s(`<h1 id="_202411" tabindex="-1">202411 <a class="header-anchor" href="#_202411" aria-label="Permalink to &quot;202411&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><blockquote><p>2024011 每年这个时候都是裁员的高峰期，希望能继续苟住</p></blockquote><blockquote><p>业务优化太难了，感觉已经到头了</p></blockquote><blockquote><p>白屏优化太难了？根本搞不定</p></blockquote></div><h2 id="_1106" tabindex="-1">1106 <a class="header-anchor" href="#_1106" aria-label="Permalink to &quot;1106&quot;">​</a></h2><ul><li>1246</li><li>今天楼上 4 楼开始装修，瞬间打乱计划，冷静面对，继续加油</li></ul><h2 id="_1120" tabindex="-1">1120 <a class="header-anchor" href="#_1120" aria-label="Permalink to &quot;1120&quot;">​</a></h2><ul><li>1260,忙忙碌碌又是 1 年</li><li>楼上装修已趋于安静，现在要做的就是准备待产内容，以及做好待产功课</li><li>又要开始写一年一度的自我总结了，这一年真的是瞬息万变，时刻都有被干掉的风险，早已不喜欢这种不稳定的生活，而且每天都被房贷笼罩着，太难了</li><li>图片中的 service worker 怎么做到的？需要研究下</li><li>网络调试[whistle](<a href="https://wproxy.org/whistle/principle.html%E8%BF%98%E6%98%AF%E4%B8%8D%E9%94%99%E7%9A%84%EF%BC%8C%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8" target="_blank" rel="noreferrer">https://wproxy.org/whistle/principle.html还是不错的，推荐使用</a></li><li>git 代码回退：<strong>git reset --soft HEAD^</strong></li></ul><div class="language-ssh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ssh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>--soft</span></span>
<span class="line"><span>不删除工作空间改动代码，撤销commit，不撤销git add .</span></span>
<span class="line"><span></span></span>
<span class="line"><span>--hard</span></span>
<span class="line"><span>删除工作空间改动代码，撤销commit，撤销git add .</span></span>
<span class="line"><span></span></span>
<span class="line"><span>注意完成这个操作后，就恢复到了上一次的commit状态。</span></span></code></pre></div><h2 id="_1122" tabindex="-1">1122 <a class="header-anchor" href="#_1122" aria-label="Permalink to &quot;1122&quot;">​</a></h2><ul><li>1262</li><li>需要购买小朋友的物品：1.硅胶勺 2.奶瓶刷 3.消毒柜 4.折叠小盆</li><li>Service Worker 是一种运行在浏览器后台的脚本，它能够拦截和管理网络请求，实现离线体验、消息推送和背景同步等功能？空闲时间，自己实现下 service worker!!!</li></ul><h2 id="_1125" tabindex="-1">1125 <a class="header-anchor" href="#_1125" aria-label="Permalink to &quot;1125&quot;">​</a></h2><ul><li>1265,每天都在面对苦难，业务优化真的是太难了，搞不好就被干掉，命悬一线</li><li>上次遇到的问题，ios ipad 端，图片加载 webp 格式加载不出来？</li><li>ikbc 键盘：FN+Del 长按五秒恢复出厂设置，不然不知道键盘突然不能切换窗口了</li></ul><h2 id="_1126" tabindex="-1">1126 <a class="header-anchor" href="#_1126" aria-label="Permalink to &quot;1126&quot;">​</a></h2><ul><li>1266，有时间多积累面试题</li><li>前端最经典面试题：浏览器事件循环？提示词：同步/异步任务，宏任务/微任务，事件表 Event Table,事件队列 Event Queue，主线程。</li><li>Nodejs 环境中的事件循环？两者差异</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><ul><li>实现机制：Node.js 和浏览器中的事件循环机制是不同的。浏览器使用 Web APIs（如 setTimeout、setInterval）和浏览器自身的事件循环机制来处理异步操作。而 Node.js 使用 libuv 库来实现事件循环，该库提供了一种跨平台的异步 I/O 模型。</li><li>宏任务/微任务执行顺序不同：在浏览器中，微任务（如 Promise 的回调函数、MutationObserver 的回调函数）会在当前宏任务执行结束后立即执行。而在 Node.js 中，微任务会在每个阶段结束后（如 timers、I/O、check 阶段）执行，而不是在当前宏任务执行结束后</li><li>默认最大并发数：在浏览器中，对于同一域名下的请求，默认情况下会有一定数量的并发请求限制（通常是 6 个），超过限制的请求会被排队等待执行。而在 Node.js 中，默认情况下没有并发请求的限制，可以同时处理大量的并发请求。</li><li>全局对象：在浏览器中，全局对象是 window，而在 Node.js 中，全局对象是 global。</li></ul></div><h2 id="_1127" tabindex="-1">1127 <a class="header-anchor" href="#_1127" aria-label="Permalink to &quot;1127&quot;">​</a></h2><ul><li>1267</li><li><a href="https://mp.weixin.qq.com/s/5e3zRDdY2r6KasERIIHBkQ" target="_blank" rel="noreferrer">Web-Worker 的基本用法并进行大文件切片上传（附带简易 Node 后端）</a></li></ul><h2 id="_1229" tabindex="-1">1229 <a class="header-anchor" href="#_1229" aria-label="Permalink to &quot;1229&quot;">​</a></h2><ul><li>1268</li><li><a href="https://juejin.cn/post/7130623457993162759#heading-4" target="_blank" rel="noreferrer">NiceModal：重新思考 React 中的弹窗使用方式</a></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div>`,19)]))}const b=e(t,[["render",o]]);export{u as __pageData,b as default};

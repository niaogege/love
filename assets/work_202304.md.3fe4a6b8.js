import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.7833fcfd.js";const A=JSON.parse('{"title":"202304","description":"","frontmatter":{},"headers":[],"relativePath":"work/202304.md"}'),l={name:"work/202304.md"},o=p(`<h1 id="_202304" tabindex="-1">202304 <a class="header-anchor" href="#_202304" aria-label="Permalink to &quot;202304&quot;">​</a></h1><p>金三银四，四月你还好吗!是否虚度了阳春三月，没关系，往前看，人间四月等着你去努力</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>人间四月芳菲尽，山寺桃花始盛开</p></div><h2 id="_0401" tabindex="-1">0401 <a class="header-anchor" href="#_0401" aria-label="Permalink to &quot;0401&quot;">​</a></h2><ul><li>花了半天时间成功注册了一个 Chatgpt 账户，验证手机号码花了几块钱租了一个<a href="https://sms-activate.org/cashBack" target="_blank" rel="noreferrer">拉脱维亚的虚拟号进行验证</a>,随便搞个 OpenApi Key: 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, <a href="https://platform.openai.com/" target="_blank" rel="noreferrer">OpenApi 后台</a></li></ul><p>接下来每天积累五条面试相关经验</p><p>在前端面试中，可能会问到以下 React 相关的面试题：</p><p>介绍 React 生命周期。</p><p>React 中的组件通信方式有哪些？</p><p>什么是虚拟 DOM？如何实现虚拟 DOM？</p><p>React 中的状态管理方式有哪些？</p><p>如何优化 React 的性能？</p><p>React 中的 key 属性有什么作用？</p><p>什么是高阶组件？如何创建高阶组件？</p><p>React 中的 ref 属性有什么作用？(from gpt)</p><p>在 React 中，ref 是用于获取组件或 DOM 元素引用的属性。通过 ref，我们可以在 React 组件渲染完成之后，访问组件或 DOM 元素的属性和方法，从而实现一些 DOM 操作或组件交互。 回调函数 ref 不仅可以用来获取 DOM 元素的引用，还可以用来获取组件的<strong>实例引用</strong>。当使用回调函数 ref 来获取组件实例时，该回调函数的参数就是组件的实例引用。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Component</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">doSomething</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// do something</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">child comp</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onClick</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#89DDFF;">        &gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">          Click me</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">App</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">handleClick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">component</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">component</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">doSomething()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={this.</span><span style="color:#A6ACCD;">handleClick</span><span style="color:#89DDFF;">} /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>React Hooks 是什么？有哪些常用的 Hooks？</p><p>什么是 Context？如何使用 Context？</p><p>介绍 React 中的路由。</p><p>React 中的事件处理方式有哪些？</p><p>如何使用 Redux 进行状态管理？</p><p>React 和 Vue 的区别有哪些？</p><ul><li><p>JIT 编译器：在 Tailwind CSS v2.1.0 及以后的版本中，Tailwind CSS 引入了一个 JIT（Just-In-Time）编译器，它的作用是<strong>动态地生成 CSS 样式类</strong>，这样可以大大减少 CSS 文件的大小。在运行时，JIT 编译器会根据用户的实际使用情况动态生成 CSS 样式类，并将其添加到最终的 CSS 文件中。</p></li><li><p><a href="https://mp.weixin.qq.com/s/J-13uueQVe-OBinXr669EQ" target="_blank" rel="noreferrer">前端框架的 JIT 和 AOT 编译方案</a></p></li></ul><p>现代前端框架都需要“编译”这一步骤，用于：</p><p>1.将框架中描述的 UI 转换为宿主环境可识别的代码</p><p>2.代码转化，比如将 ts 编译为 js、实现 polyfill 等</p><p>3.执行一些编译时优化</p><p>4.代码打包、压缩、混淆</p><p>编译可以选择放在两个时机执行：</p><p>代码构建时，被称为 <strong>AOT（Ahead Of Time，提前编译或预编译）</strong>，宿主环境获得的是编译后的代码</p><p>代码在宿主环境执行时，被称为 <strong>JIT（Just In Time，即时编译）</strong>，代码在宿主环境编译并执行</p><h3 id="如何通过编译器的优化原理-如何提高-javascript-的执行效率-from-gpt" tabindex="-1">如何通过编译器的优化原理，如何提高 JavaScript 的执行效率？(from gpt) <a class="header-anchor" href="#如何通过编译器的优化原理-如何提高-javascript-的执行效率-from-gpt" aria-label="Permalink to &quot;如何通过编译器的优化原理，如何提高 JavaScript 的执行效率？(from gpt)&quot;">​</a></h3><p>编译器的优化原理主要是基于静态分析和运行时优化两个方面来实现的，可以通过以下方式来提高 JavaScript 的执行效率：</p><ul><li><p>减少变量的使用：在 JavaScript 中，变量的使用会导致内存分配和垃圾回收等操作，从而影响代码的执行效率。因此，在编写 JavaScript 代码时，应尽量减少变量的使用。</p></li><li><p>避免频繁创建对象和数组：在 JavaScript 中，创建对象和数组会导致内存分配和垃圾回收等操作，从而影响代码的执行效率。因此，在编写 JavaScript 代码时，应尽量避免频繁创建对象和数组。</p></li><li><p>使用函数节流和函数防抖：在处理一些频繁触发的事件时，可以使用函数节流和函数防抖来优化代码的执行效率。函数节流可以控制函数的执行频率，从而避免频繁的操作，而函数防抖可以在一定的延迟时间之后执行函数，从而避免重复执行。</p></li><li><p>使用 Web Worker：Web Worker 可以在独立的线程中执行 JavaScript 代码，从而避免阻塞主线程，提高代码的执行效率。</p></li><li><p>使用编译器的优化原理：编译器的优化原理可以帮助我们优化 JavaScript 代码的执行效率，例如使用 webpack、rollup 等构建工具来进行代码压缩和打包，使用 Babel 等工具进行语法转换和优化等操作，从而减少 JavaScript 代码的体积和提高代码的执行效率。</p></li><li><p>使用代码优化工具：使用一些代码优化工具，例如 Google 的 Closure Compiler、UglifyJS 等，可以帮助我们对 JavaScript 代码进行分析和优化，从而提高代码的执行效率。</p></li></ul><p>总之，在提高 JavaScript 的执行效率时，需要结合编译器的优化原理、代码优化工具和代码编写习惯等多个方面进行综合优化。</p><h3 id="javascript-是如何执行的-from-gpt" tabindex="-1">JavaScript 是如何执行的？(from gpt) <a class="header-anchor" href="#javascript-是如何执行的-from-gpt" aria-label="Permalink to &quot;JavaScript 是如何执行的？(from gpt)&quot;">​</a></h3><p>JavaScript 的执行过程可以分为两个阶段：编译阶段和执行阶段。</p><p>编译阶段：在编译阶段，JavaScript 引擎会对代码进行词法分析和语法分析，生成抽象语法树（AST），并且对代码进行预编译，例如变量提升、函数声明提升等操作。在这个阶段，JavaScript 引擎会检查代码是否符合语法规范，并生成执行上下文（Execution Context）。</p><p>执行阶段：在执行阶段，JavaScript 引擎会按照编译阶段生成的执行上下文执行代码。执行上下文包含了变量、函数、作用域链等信息，JavaScript 引擎根据作用域链来查找变量和函数，并且在执行过程中进行变量赋值、函数调用等操作。在执行过程中，JavaScript 引擎会将代码分为同步任务和异步任务，同步任务会按照顺序执行，而异步任务会先被放到任务队列中，等待下一个事件循环执行。</p><p>JavaScript 引擎执行代码时，还会进行垃圾回收和优化等操作。垃圾回收是指当变量或对象不再被引用时，会被自动清除内存空间，从而避免内存泄漏。优化是指 JavaScript 引擎会根据代码的执行情况进行优化，例如 JIT 编译、预解析等操作，从而提高代码的执行效率。</p><p>总之，JavaScript 的执行过程是一个编译和执行的过程，通过编译阶段和执行阶段的协同工作，JavaScript 能够完成对代码的解析和执行。</p><h3 id="说下-ts-中的泛型-from-gpt" tabindex="-1">说下 TS 中的泛型(from gpt) <a class="header-anchor" href="#说下-ts-中的泛型-from-gpt" aria-label="Permalink to &quot;说下 TS 中的泛型(from gpt)&quot;">​</a></h3><p>在 TypeScript 中，泛型允许我们在定义函数、类或接口时不预先指定类型，而是在使用时再动态指定类型，以增加代码的灵活性和复用性。(定义时不指定具体类型)</p><p>泛型的基本语法是使用尖括号<code>&lt;T&gt;</code>（T 可以替换为任意标识符），将类型参数声明在函数或类名之后</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">GenericNumber</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">zeroValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">add</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> myGenericNumber </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">GenericNumber</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">myGenericNumber</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">zeroValue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">myGenericNumber</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre></div>`,46),e=[o];function t(c,r,D,y,F,i){return a(),n("div",null,e)}const m=s(l,[["render",t]]);export{A as __pageData,m as default};

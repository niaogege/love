import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.122f41a6.js";const h=JSON.parse('{"title":"202310","description":"","frontmatter":{},"headers":[],"relativePath":"work/202310.md","filePath":"work/202310.md"}'),p={name:"work/202310.md"},o=l(`<h1 id="_202310" tabindex="-1">202310 <a class="header-anchor" href="#_202310" aria-label="Permalink to &quot;202310&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>结完婚，即将步入人生的另一个阶段</p><blockquote><p>20231007 是的</p></blockquote></div><h2 id="_1001-1006" tabindex="-1">1001-1006 <a class="header-anchor" href="#_1001-1006" aria-label="Permalink to &quot;1001-1006&quot;">​</a></h2><ul><li>人心是看不清的，只有通过一些人和事才能看清，温暖的人也一定会继续温暖下去</li><li>吃过的亏会铭记一生，而有些遗憾也会铭记终生</li><li>当前最难也是最主要的任务就是，提前还完商贷</li></ul><h2 id="_1007" tabindex="-1">1007 <a class="header-anchor" href="#_1007" aria-label="Permalink to &quot;1007&quot;">​</a></h2><ul><li>来公司的第 850 天</li><li>身体慢慢恢复中</li></ul><h2 id="_1008" tabindex="-1">1008 <a class="header-anchor" href="#_1008" aria-label="Permalink to &quot;1008&quot;">​</a></h2><ul><li>还要再拼五年，也就是 36 岁左右就会回归正常</li><li>休息一下，回归正常，前端知识图卷需要构建起来</li></ul><h2 id="_1009" tabindex="-1">1009 <a class="header-anchor" href="#_1009" aria-label="Permalink to &quot;1009&quot;">​</a></h2><h3 id="要在-linux-命令行中查看-node-js-应用的环境变量-可以使用以下命令" tabindex="-1">要在 Linux 命令行中查看 Node.js 应用的环境变量，可以使用以下命令： <a class="header-anchor" href="#要在-linux-命令行中查看-node-js-应用的环境变量-可以使用以下命令" aria-label="Permalink to &quot;要在 Linux 命令行中查看 Node.js 应用的环境变量，可以使用以下命令：&quot;">​</a></h3><p>首先，找到正在运行的 Node.js 应用程序的进程 ID（PID）。可以使用 ps 命令来查找，例如：</p><p><code>ps aux | grep node</code> 这将列出所有包含 &quot;node&quot; 字符串的进程，找到你的 Node.js 应用程序并记录其 PID。</p><p>一旦你有了 Node.js 应用程序的 PID，你可以使用 cat 命令和/proc 文件系统来查看其环境变量。假设你的 PID 是 12345（请用实际的 PID 替换），可以运行：</p><p><code>cat /proc/12345/environ</code> 这将打印出 Node.js 应用程序的环境变量，每个变量之间用 NULL 字符分隔。</p><p>请注意，这种方法显示的环境变量可能会包括许多系统级变量，所以你可能需要查找特定于你的 Node.js 应用程序的变量。如果你只想查看特定的环境变量，你可以使用 grep 命令来过滤输出，例如：</p><p><code>cat /proc/12345/environ | tr &#39;\\0&#39; &#39;\\n&#39; | grep NODE_ENV</code> 这将只显示名为 NODE_ENV 的环境变量及其值。</p><ul><li><a href="https://mp.weixin.qq.com/s/ak1J3XALUIpV1Y_doW6Leg" target="_blank" rel="noreferrer">如何实现并部署自己的 npm 解析服务</a></li></ul><h2 id="_1010" tabindex="-1">1010 <a class="header-anchor" href="#_1010" aria-label="Permalink to &quot;1010&quot;">​</a></h2><ul><li>白屏率 秒开率怎么定义的？</li></ul><p>白屏率（First Paint）是一个 Web 性能指标，用于衡量用户在访问网站或应用程序时首次看到页面内容的时间点。它通常表示用户打开页面后，浏览器首次在屏幕上渲染出可见的内容。白屏率是用户体验和性能优化的重要指标之一，因为它直接关系到用户对页面加载速度的感知。</p><blockquote><p>通过站内白屏检测，检测时长超过过 5s 的比例，代表页面打开发生白屏的几率,越低越好</p></blockquote><p>&quot;秒开率&quot; 是一个衡量网站或应用程序性能的指标，它表示用户访问网站或打开应用后，页面或应用能够在多快的时间内展示完整的内容或达到可操作的状态。秒开率通常被定义为用户在访问页面或应用后，能够在几秒内获得有用信息或开始与页面或应用进行交互的比例。</p><blockquote><p>通过站内白屏检测，检测时长不超过过 1s 的比例，代表多少用户可以在 1s 内打开页面，越高越好</p></blockquote><p>异常率</p><blockquote><p>上报异常数量/PV，代表异常出现的频率，越低越好</p></blockquote><ul><li>说说 tcp 三次挥手，为什么不能两次？</li></ul><p>TCP 三次握手，其实就是建立一个 TCP 连接，客户端与服务器交互需要 3 个数据包。握手的主要作用就是为了确认双方的接收和发送能力是否正常，初始序列号，交换窗口大小等信息。不能只使用两次挥手的原因是因为 TCP 是全双工协议，即数据可以在两个方向上同时传输</p><p>第一次： SYN 客户端向服务器端发送一个 SYN 请求包，包含客户端使用的端口号和初始序列号 seq=x,并进入 <strong>SYN_SENT</strong> 状态，等待服务器的确认</p><p>第二次： SYN+ACK 服务器端收到客户端发送过来的 SYN 请求包后，知道客户端想要建立连接，需要向客户端发送一个 SYN+ACK 报文，包含确认号 ack=x+1 和服务器端的初始序列号 seq=y，此时服务器进入 <strong>SYN_RCVD</strong> 状态；</p><p>第三次： ACK 客户端收到服务器端返回的 SYN 请求包和 ACK 回应包后，需要向服务器端发送确认包(确认号 ack=y+1 和序号 seq=x+1 的 ACK 请求包)，客户端进入 <strong>ESTABLISHED</strong> 状态。待服务器收到客户端发送的 ACK 包也会进入 ESTABLISHED 状态，完成三次握手。</p><ul><li>讲讲 tcp 粘包</li></ul><p>TCP 粘包问题指的是接收端无法准确地区分和处理接收到的 TCP 数据流，导致数据粘在一起或者拆分不正确。</p><p>这个问题通常发生在以下情况下：</p><p>1.发送数据速度快于接收方处理的速度：如果发送方迅速发送多个小数据包，而接收方的处理速度较慢，那么这些数据包可能会在接收方缓冲区中合并成一个较大的数据块，导致粘包问题。</p><p>2.接收方不知道如何正确拆分数据：如果接收方没有明确的数据分隔符或消息长度信息，它可能无法正确地将接收到的数据拆分为原始消息。</p><p>为了解决 TCP 粘包问题，可以采取以下方法：</p><p>1.消息分隔符：在消息中包含特定的分隔符（如换行符 \\n 或其他自定义字符），接收方可以使用这些分隔符来将数据拆分为独立的消息。</p><p>2.消息长度前缀：在消息前面添加一个表示消息长度的前缀，接收方可以首先读取长度前缀，然后根据长度来正确拆分消息。</p><p>3.使用固定长度的消息：确保所有消息都具有相同的固定长度，这样接收方就可以根据消息长度来准确地拆分它们。</p><p>4.使用高级协议：使用高级协议（如 HTTP）可以更容易地解决粘包问题，因为这些协议通常定义了消息的格式和分隔方法。</p><p>5.调整缓冲区大小：可以尝试调整接收方的缓冲区大小以减少粘包问题。较小的缓冲区可能更容易引发粘包，而较大的缓冲区可以减少这种问题。</p><p>解决 TCP 粘包问题需要根据具体情况选择合适的方法，并在通信双方保持一致的处理方式。这有助于确保数据能够准确地拆分和处理，避免数据粘包和解析错误。</p><ul><li><p>浏览器的核心线程和核心进程有哪些 1.主进程(负责协调、主控，只有一个) 负责浏览器界面显示，与用户交互。如前进，后退等负责各个页面的管理，创建和销毁其他进程将 Renderer 进程得到的内存中的 Bitmap，绘制到用户界面上网络资源的管理，下载等</p><p>2.渲染进程(又称浏览器内核, Renderer 进程，内部是多线程的) 默认每个 Tab 页面一个进程，互不影响。主要作用为页面渲染，脚本执行，事件处理等</p><p>3.GPU 进程最多一个，用于 3D 绘制等</p><p>4.第三方插件进程</p></li></ul><p>核心进程有哪些线程？</p><p>1.GUI 渲染线程</p><p>2.定时触发器线程</p><p>3.异步 http 请求线程</p><p>4.JS 引擎线程：1.JS 内核，负责处理 Javascript 脚本程序。（例如 V8 引擎） 2.JS 引擎线程负责解析 Javascript 脚本，运行代码。 3.JS 引擎一直等待着任务队列中任务的到来，然后加以处理，一个 Tab 页（renderer 进程）中无论什么时候都只有一个 JS 线程在运行 JS 程序</p><h2 id="_1011" tabindex="-1">1011 <a class="header-anchor" href="#_1011" aria-label="Permalink to &quot;1011&quot;">​</a></h2><ul><li>854</li><li>与其坐以待毙，不如自己主动出击，变被动为主动，进可攻，退可守，一切都刚刚好是最幸福的</li><li>做好打仗的准备，感觉年底会有大的动荡</li><li>e.currentTarget 与 e.target 有何区别?</li></ul><p>target: <strong>代表的是触发事件的元素</strong></p><p>currentTarget: <strong>代表的是绑定事件的元素</strong></p><p>事件委托指当有大量子元素触发事件时，将事件监听器绑定在父元素进行监听，此时数百个事件监听器变为了一个监听器，提升了网页性能。</p><p>另外，React 把所有事件委托在 <code>Root Element</code>，用以提升性能。</p><ul><li>Nextjs 中如何把 cookie 从客户端传递给服务端，或者把 cookie 从 node 端传递给客户端?</li></ul><h2 id="_1012-1013" tabindex="-1">1012/1013 <a class="header-anchor" href="#_1012-1013" aria-label="Permalink to &quot;1012/1013&quot;">​</a></h2><ul><li><p>856</p></li><li><p>连续上 7 天班 身体吃不消，休息完之后可能是最后一次准备 interview,提前做好各种准备</p><blockquote><p>虽然很喜欢现在的生活，也很满足，但是人无远虑，必有近忧</p></blockquote></li><li><p>TS 中的 26 个英文字母作为 Key 如何定义</p></li></ul><h2 id="_1014-15-16" tabindex="-1">1014/15/16 <a class="header-anchor" href="#_1014-15-16" aria-label="Permalink to &quot;1014/15/16&quot;">​</a></h2><h2 id="_1017" tabindex="-1">1017 <a class="header-anchor" href="#_1017" aria-label="Permalink to &quot;1017&quot;">​</a></h2><ul><li>860 听到另一个同事要离职，感觉不舒服，同时又很强的压迫感和紧张感，为啥大龄程序员这么惨？没有下家了，要失业了，好惨</li><li>手写题 <code>Promise.finally</code> 如何实现</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">exe</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.cbs </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.val </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> val</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.cbs.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">(val))</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">exe</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">onResolved</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">onrejected</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.cbs.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onResolved</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.val)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (res </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Promise</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          res.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(resolve)</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(res)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">finally</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">cb</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      (</span><span style="color:#FFAB70;">val</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> val);</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">cb</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> throw err);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#E36209;">exe</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.cbs </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.val </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> val</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.cbs.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">((</span><span style="color:#E36209;">cb</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">cb</span><span style="color:#24292E;">(val))</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">exe</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">onResolved</span><span style="color:#24292E;">, </span><span style="color:#E36209;">onrejected</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">((</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.cbs.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onResolved</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.val)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (res </span><span style="color:#D73A49;">instanceof</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Promise</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          res.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(resolve)</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(res)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">finally</span><span style="color:#24292E;">(</span><span style="color:#E36209;">cb</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      (</span><span style="color:#E36209;">val</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">cb</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> val);</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">      (</span><span style="color:#E36209;">err</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">cb</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> throw err);</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>手写 js 有序数组原地去重</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">44</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">44</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">55</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">redup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(item) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> i);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unique</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// return [...new Set(arr)];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(arr));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unique2</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">arr</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">m</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Map</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> arr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">m.</span><span style="color:#B392F0;">has</span><span style="color:#E1E4E8;">(arr[i])) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      res.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(arr[i]);</span></span>
<span class="line"><span style="color:#E1E4E8;">      m.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(arr[i], </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> res;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// redup(list);</span></span>
<span class="line"><span style="color:#B392F0;">dup</span><span style="color:#E1E4E8;">(list);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">33</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">44</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">44</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">55</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">redup</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((</span><span style="color:#E36209;">item</span><span style="color:#24292E;">, </span><span style="color:#E36209;">i</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> arr.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(item) </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> i);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unique</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// return [...new Set(arr)];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(arr));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unique2</span><span style="color:#24292E;">(</span><span style="color:#E36209;">arr</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">m</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Map</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> arr.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">m.</span><span style="color:#6F42C1;">has</span><span style="color:#24292E;">(arr[i])) {</span></span>
<span class="line"><span style="color:#24292E;">      res.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(arr[i]);</span></span>
<span class="line"><span style="color:#24292E;">      m.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(arr[i], </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> res;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// redup(list);</span></span>
<span class="line"><span style="color:#6F42C1;">dup</span><span style="color:#24292E;">(list);</span></span></code></pre></div><h2 id="_1018" tabindex="-1">1018 <a class="header-anchor" href="#_1018" aria-label="Permalink to &quot;1018&quot;">​</a></h2><ul><li>公司开始进行人才盘点，会不会是 cy 的兆头？</li><li>看了知乎的文章： <a href="https://zhuanlan.zhihu.com/p/661422932" target="_blank" rel="noreferrer">妻子生命倒计时，心如刀绞 - 闪闪爱过这世界的文章 - 知乎</a></li></ul><blockquote><p>我建议路过，看到这里的各位，不要吝啬，一定要买一份补充医疗险和一份重症险。我可能是一朝被蛇咬。</p></blockquote><h2 id="_1019" tabindex="-1">1019 <a class="header-anchor" href="#_1019" aria-label="Permalink to &quot;1019&quot;">​</a></h2><ul><li>年轻人 50%的人存款不到 10 万? <img src="https://s2.loli.net/2023/10/19/bznC1xt4MwUup2N.webp" alt="现代人穷的根本看不出来"><blockquote><p>工资低,常年不涨，房贷/房租/生活支出太高</p></blockquote></li><li>保险的事宜还需要继续了解?重疾险和医疗补充险</li></ul><h2 id="_1020" tabindex="-1">1020 <a class="header-anchor" href="#_1020" aria-label="Permalink to &quot;1020&quot;">​</a></h2><ul><li><p>还是想基于 nodejs 实现一个记账本，顺便学习前端 nodejs 和 db 之间的联系。犹豫要不要学一下<a href="https://juejin.cn/book/6966551262766563328/section/6966893390193491971" target="_blank" rel="noreferrer">Node + React 实战：从 0 到 1 实现记账本</a></p></li><li><p>Nestjs 基本全忘记了，需要重拾！！！</p></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">• controller </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 控制器，用于处理前端发起的各类请求</span></span>
<span class="line"><span style="color:#E1E4E8;">• service </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 服务类，用于处理与数据库交互逻辑</span></span>
<span class="line"><span style="color:#E1E4E8;">• dto </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">DTO</span><span style="color:#E1E4E8;">（Data Transfer Object）可以用于验证输入数据、限制传输的字段或格式。</span></span>
<span class="line"><span style="color:#E1E4E8;">• entities </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 实体类，用于描述对象相关的属性信息</span></span>
<span class="line"><span style="color:#E1E4E8;">• </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> 模块，用于注册所有的服务类、控制器类</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">• controller </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 控制器，用于处理前端发起的各类请求</span></span>
<span class="line"><span style="color:#24292E;">• service </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 服务类，用于处理与数据库交互逻辑</span></span>
<span class="line"><span style="color:#24292E;">• dto </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">DTO</span><span style="color:#24292E;">（Data Transfer Object）可以用于验证输入数据、限制传输的字段或格式。</span></span>
<span class="line"><span style="color:#24292E;">• entities </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 实体类，用于描述对象相关的属性信息</span></span>
<span class="line"><span style="color:#24292E;">• </span><span style="color:#005CC5;">module</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> 模块，用于注册所有的服务类、控制器类</span></span></code></pre></div><h2 id="_1021-1022" tabindex="-1">1021/1022 <a class="header-anchor" href="#_1021-1022" aria-label="Permalink to &quot;1021/1022&quot;">​</a></h2><ul><li>意外险基本就定在了大护甲家庭版或者个人版？</li><li>手写还不是很熟练，需要反复操练，早做打算</li><li></li></ul>`,73),e=[o];function r(t,c,E,y,i,F){return n(),a("div",null,e)}const d=s(p,[["render",r]]);export{h as __pageData,d as default};

import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.ymCRTBvy.js";const _=JSON.parse('{"title":"202505","description":"","frontmatter":{},"headers":[],"relativePath":"work/2025/202505.md","filePath":"work/2025/202505.md"}'),o={name:"work/2025/202505.md"};function r(s,l,n,c,u,d){return e(),a("div",null,l[0]||(l[0]=[t('<h1 id="_202505" tabindex="-1">202505 <a class="header-anchor" href="#_202505" aria-label="Permalink to &quot;202505&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><blockquote><p>是走是留 都是未知数 20240930 估计很难熬到这时候，而且要面临找房，心情复杂 历史型的熬到了 2025 年 5 月，即将满四周年，还差一个月</p></blockquote></div><h2 id="_0501" tabindex="-1">0501 <a class="header-anchor" href="#_0501" aria-label="Permalink to &quot;0501&quot;">​</a></h2><ul><li>如果还能苟住的话，五一就开始找房，希望能找到 3500 以下的房子</li></ul><h2 id="_0504" tabindex="-1">0504 <a class="header-anchor" href="#_0504" aria-label="Permalink to &quot;0504&quot;">​</a></h2><ul><li>1425，距离四周年还剩 35 天，未来仍然一片迷茫</li><li>4 年前的现在在准备前端面试，如果现在被淘汰，又要开始继续准备前端面试。</li></ul><h2 id="_0505" tabindex="-1">0505 <a class="header-anchor" href="#_0505" aria-label="Permalink to &quot;0505&quot;">​</a></h2><ul><li>1426</li><li>五一匆匆忙忙过完，期待明年的五一</li></ul><h2 id="_0506" tabindex="-1">0506 <a class="header-anchor" href="#_0506" aria-label="Permalink to &quot;0506&quot;">​</a></h2><ul><li>1427</li><li>又要开始搬砖了，而且一眼到头，没啥奔头，只能说自己时运不济。</li><li>早上起来，闺女没有护住脖颈，往后仰，差点摔下去，这次给了我一个很大的警钟，安全永远是第一位的。等回去看看，小腿还瞪不瞪，还能不能翻身</li></ul><h2 id="_0508" tabindex="-1">0508 <a class="header-anchor" href="#_0508" aria-label="Permalink to &quot;0508&quot;">​</a></h2><ul><li>1429</li><li>tcp 可以同时监听多个端口吗 ？可以的，TCP 可以通过创建多个套接字监听不同端口，比如 nginx 服务器，它可以同时监听 80 端口和 443 端口。</li><li>Redis 的数据结构你知道哪些？</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Redis 提供了丰富的数据类型，常见的有五种数据类型：String（字符串），Hash（哈希），List（列表），Set（集合）、Zset（有序集合）。</p><ul><li>String 类型的应用场景：缓存对象、常规计数、分布式锁、共享 session 信息等。</li><li>List 类型的应用场景：消息队列（但是有两个问题：1. 生产者需要自行实现全局唯一 ID；2. 不能以消费组形式消费数据）等。Hash 类型：缓存对象、购物车等。</li><li>Set 类型：聚合计算（并集、交集、差集）场景，比如点赞、共同关注、抽奖活动等。</li><li>Zset 类型：排序场景，比如排行榜、电话和姓名排序等。</li></ul></div><ul><li>单例模式的应用场景有哪些？</li></ul><p>单例模式的核心是确保一个类只有一个实例，并提供全局访问点。它适用于需要严格控制资源唯一性或全局共享状态的场景。以下是单例模式的典型应用场景及具体分析：</p><ul><li>全局配置管理：应用程序的配置信息（如数据库连接参数、系统路径、环境变量等）需要全局唯一且一致，用了单例模式之后避免多次读取配置文件，节省资源。</li><li>日志记录器：所有模块需要向同一个日志文件写入日志，确保日志顺序和一致性，用了单例模式之后可以避免多个日志实例竞争文件资源。</li><li>数据库连接池：管理数据库连接，避免频繁创建和销毁连接带来的性能开销，连接池需要全局唯一，统一分配和回收连接。</li></ul>',16)]))}const p=i(o,[["render",r]]);export{_ as __pageData,p as default};

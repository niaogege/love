import{_ as i,c as a,a2 as l,o as n}from"./chunks/framework.C3rjE0BJ.js";const o=JSON.parse('{"title":"202410","description":"","frontmatter":{},"headers":[],"relativePath":"work/2024/202410.md","filePath":"work/2024/202410.md"}'),h={name:"work/2024/202410.md"};function t(e,s,k,p,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="_202410" tabindex="-1">202410 <a class="header-anchor" href="#_202410" aria-label="Permalink to &quot;202410&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><blockquote><p>2024010 国庆放假回来，不知道前端知识忘记了多少</p></blockquote></div><h2 id="_1008" tabindex="-1">1008 <a class="header-anchor" href="#_1008" aria-label="Permalink to &quot;1008&quot;">​</a></h2><ul><li>1216</li><li>如何度过这漫长而又苦逼的一生？微笑面对，smile to life</li><li><a href="https://mp.weixin.qq.com/s/EKTAYspvloDXiKwaBnwazA" target="_blank" rel="noreferrer">Http 请求中增加的新的方法类型</a>,总结起来就是： 1.能承载大量请求数据 2.保证请求的幂等性和安全性。QUERY 是一种安全且幂等的 HTTP 请求方法，它允许携带请求内容。与 GET 方法不同，QUERY 方法并不请求服务器返回指定 URI 资源的表示，而是要求服务器根据请求内容进行查询操作。简单来说，QUERY 方法通过请求体来定义查询操作，并将操作结果作为响应返回。</li><li><a href="https://mp.weixin.qq.com/s/HxS-g3ldqhs-y1YE7uWnJA" target="_blank" rel="noreferrer">数组解构是如何降低 JavaScript 的运行速度</a></li><li>prisma 中的事务是什么？有啥用？</li><li>想法：现实中买房或者租房成本太高，如果一旦不合适，就要承担高额违约金，就不能推出试用版，试用一周或者两周，都是付费，如果不合适解约就行，也不需要支付这么贵的金额</li><li>现在企业招聘都要求：有 Node.js 或者 AI 项目开发经验者优先？<a href="https://github.com/ruanyf/weekly/issues/5090" target="_blank" rel="noreferrer">招聘目录</a></li></ul><h2 id="_1009" tabindex="-1">1009 <a class="header-anchor" href="#_1009" aria-label="Permalink to &quot;1009&quot;">​</a></h2><ul><li>1217</li><li>最难熬的一季，老婆还有最后三个月就要生了，需要额外关照，每年冬天也是公司裁员的高峰期，还要面临被裁员的风险，buffer 叠满，双重压力。感觉压力快赶上上海最黑暗的时刻了。每次产检都紧张的要死要死，希望宝宝一切都好</li><li><a href="https://www.ruanyifeng.com/blog/2024/07/copilot-vs-marscode.html" target="_blank" rel="noreferrer">大佬的博客干活满满，值得一读</a></li><li>“每个人的生活都是一条通向自身的道路。每个人的真正职责只有一个：找到自我。然后在心中坚守一生，全心全意，永不停息。 所有其它的路都是不完整的，是人的逃避方式，是对社会角色的懦弱伪装，是随波逐流，是对内心的恐惧。”</li><li>最近  ECMAScript  引入了一个新的提案：proposal-safe-assignment-operator，中文翻译为：安全赋值运算符，代码中是<code>?=</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetchData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] ?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>很多人会问，为啥要将  error  放前面，而  result  放后面呢？其实很好理解，因为并不是所有函数执行都会有返回结果的，换句话说：error 是客观存在的，result 是主观存在的，所以  error  放前面更方便，代码判断起来更加舒服</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolvePromise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      reject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] ?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolvePromise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error, res)</span></span></code></pre></div><h2 id="_1010" tabindex="-1">1010 <a class="header-anchor" href="#_1010" aria-label="Permalink to &quot;1010&quot;">​</a></h2><ul><li>1217</li><li>MemoryRouter 与 BrowserRouter 的区别是什么？</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>MemoryRouter 和 BrowserRouter 是 react-router-dom 库中提供的两种不同类型的路由组件，它们在数据持久性和使用场景上有所不同： 1.数据持久性：</p><p>BrowserRouter：使用浏览器的历史 API 来管理路由状态，这意味着路由状态会被持久化到浏览器的历史记录中。当你使用 BrowserRouter 时，用户可以通过浏览器的前进和后退按钮来导航到不同的路由状态。 MemoryRouter：路由状态仅存在于内存中，不依赖于浏览器的历史记录。这意味着，当用户刷新页面或者关闭并重新打开浏览器时，MemoryRouter 将不会记住之前的路由状态。</p><p>2.使用场景：<br> BrowserRouter：适用于大多数 SPA（单页应用程序）场景，因为它与浏览器的历史记录集成，提供了自然的导航体验。 MemoryRouter：适用于不需要持久化路由状态的场景，如： 服务器端渲染（SSR）的应用程序，因为服务器端渲染时没有浏览器环境，所以不能使用 BrowserRouter。 模态对话框或弹出窗口内部的路由，这些组件可能需要自己的路由逻辑，而不干扰主应用程序的路由状态。 测试环境，用于模拟路由行为而不影响全局的路由状态。 临时的、一次性的路由需求，例如，当你需要一个独立的路由实例来展示某个组件，而不希望这个状态被持久化。</p></div><ul><li>ios 白屏率优化？h5 页面能做啥，该做的缓存和压缩/http2.0/已经有了，还能做啥？</li></ul><h2 id="_1012" tabindex="-1">1012 <a class="header-anchor" href="#_1012" aria-label="Permalink to &quot;1012&quot;">​</a></h2><ul><li>1219</li><li>每次看到评优秀员工，始终都跟我无缘，做了 3 年，是自己不够努力还是处理方式有问题，得不到好的绩效就不能晋升，从来不想躺平，但现在的处境还无奈</li><li>你是否别来无恙？对此，已经放弃，不报任何希望。</li><li>做个小工具集合</li></ul><h2 id="_1015" tabindex="-1">1015 <a class="header-anchor" href="#_1015" aria-label="Permalink to &quot;1015&quot;">​</a></h2><ul><li>1224</li><li>利用空闲时间完成小程序的基础模块搭建工作</li><li>利用空闲时间完成前端有关知识熟悉</li><li><a href="https://www.affde.com/zh-CN/time-to-first-byte-ttfb.html" target="_blank" rel="noreferrer">什么是首字节时间 (TTFB) 以及如何减少它</a></li><li>客户端增加离线化策略阔以减少 h5 页面里的首字节时间。</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>抓取资源这一步是由前端发起、node 端抓取、返回给前端，前端再将返回来的资源链接传递给服务端（Java），服务端根据链接资源将文件下载并打成压缩包下发给客户端。</p><p>抓取的是由 node 服务来执行，node 服务里面又使用了 Puppeteer 无头浏览器作为工具，puppeteer 抓完资源后，会将资源链接返回给前端，前端将资源链接发送给 Java 服务端，服务端再根据链接将资源下载下来，进行压缩，下发给离线包。</p></div><h2 id="_1016" tabindex="-1">1016 <a class="header-anchor" href="#_1016" aria-label="Permalink to &quot;1016&quot;">​</a></h2><ul><li>1225</li><li>要不要落户? 如果能闯过这最后的 2 个月再说</li><li><a href="https://mp.weixin.qq.com/s/eIf-jdr1yYjSndpNw_Gayg" target="_blank" rel="noreferrer">性能优化？</a></li></ul><details class="details custom-block"><summary>Details</summary><h2 id="h5-页面的白屏优化" tabindex="-1">H5 页面的白屏优化 <a class="header-anchor" href="#h5-页面的白屏优化" aria-label="Permalink to &quot;H5 页面的白屏优化&quot;">​</a></h2><h3 id="看板-指标" tabindex="-1">看板/指标 <a class="header-anchor" href="#看板-指标" aria-label="Permalink to &quot;看板/指标&quot;">​</a></h3><p>客户端是如何计算的白屏的,截取像素点，然后计算出白屏的时间，超出五秒检测依然是没有像素则是白屏</p><h3 id="措施" tabindex="-1">措施 <a class="header-anchor" href="#措施" aria-label="Permalink to &quot;措施&quot;">​</a></h3><p>客户端/资源加载/渲染优化</p><ul><li>离线化策略，ttfb 首字节到达时间优化</li><li>webview 预加载</li><li>链接保活，在 APP 开屏等待的时候，就预先建立关键域名的连接？</li><li>loading 直出</li><li>合理配置静态资源的缓存策略，ios 充分利用 http 缓存策略进行缓存</li><li>302 重定向页面，加载 loading</li><li>图片资源裁剪/压缩</li><li>cdn 加速</li></ul></details><h2 id="_1017" tabindex="-1">1017 <a class="header-anchor" href="#_1017" aria-label="Permalink to &quot;1017&quot;">​</a></h2><ul><li>1226</li><li><a href="https://mp.weixin.qq.com/s/y586E0E52of2MXa5REiy-w" target="_blank" rel="noreferrer">AbortController 一切皆可中断</a><details class="details custom-block"><summary>Details</summary></details></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> controller</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbortController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">controller.signal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">controller.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>我们创建一个 AbortController 实例后，会得到两个东西：signal 属性，这是一个 AbortSignal 实例，我们可以将它传递给要中断的 API，来响应中断事件并进行相应处理，例如，传递给 fetch() 方法就可以终止这个请求了；.abort() 方法，调用这个方法会触发 signal 上的中止事件，并将信号标记为已中止。</p><p>我们可以通过监听 <strong>abort</strong> 事件，然后根据特定的逻辑实现中止：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">controller.signal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abort&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 实现中止逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>:::</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/sendBeacon" target="_blank" rel="noreferrer">navigator.sendBeacon</a></li><li>合并同类项,reduce 实现</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 统计对象中值的出现次数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> names</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tiff&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bruce&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> couns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">allName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> currCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allName[names] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">allName,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [names]: currCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">couns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(names)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 按属性对对象进行分组</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">acc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj[property]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> curGroup</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> acc[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">acc,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [key]: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">curGroup, obj],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, {})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> people</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Max&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jane&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">merge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(people, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   20: [</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     { name: &#39;Max&#39;, age: 20 },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//     { name: &#39;Jane&#39;, age: 20 }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ],</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   21: [{ name: &#39;Alice&#39;, age: 21 }]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// }</span></span></code></pre></div><h2 id="_1020" tabindex="-1">1020 <a class="header-anchor" href="#_1020" aria-label="Permalink to &quot;1020&quot;">​</a></h2><ul><li>1229</li><li>还是不能松懈</li></ul><h2 id="_1024" tabindex="-1">1024 <a class="header-anchor" href="#_1024" aria-label="Permalink to &quot;1024&quot;">​</a></h2><ul><li>1233</li><li>今天是 1024，祝大家节日快乐，且行且珍惜，没多少时间让自己挥霍了，好好做完自己的小程序</li><li><a href="https://www.whatsmybrowser.org/" target="_blank" rel="noreferrer">https://www.whatsmybrowser.org/</a> 检测浏览器内核版本</li><li>常说的安卓端 crash 是啥意思？</li></ul><details class="details custom-block"><summary>Details</summary><p>在安卓（Android）应用开发中，&quot;crash&quot;指的是应用程序在运行过程中遇到了无法处理的错误，导致应用意外终止。当应用 crash 时，它会停止运行，并且通常会弹出一个错误报告，询问用户是否要向开发者报告这个错误。</p><p>导致应用 crash 的原因有很多，包括但不限于：</p><ul><li>内存不足：如果应用尝试分配的内存超过了可用内存，可能会导致崩溃。</li><li>空指针异常：尝试访问或操作一个未初始化或已被释放的对象时，可能会触发空指针异常。</li><li>资源文件缺失或损坏：如果应用依赖的资源文件（如图片、音频文件等）缺失或损坏，也可能导致崩溃。</li><li>代码逻辑错误：开发者在代码中可能存在逻辑错误，比如数组越界、无限循环等。</li><li>第三方库或服务的问题：如果应用使用了第三方库或服务，而这些库或服务存在问题，也可能导致应用崩溃。</li><li>系统兼容性问题：应用可能在某些设备或操作系统版本上不兼容，导致运行时崩溃。</li><li>网络问题：如果应用依赖网络连接，而网络不稳定或连接失败，也可能导致崩溃。 解决应用 crash 通常需要开发者通过查看日志、使用调试工具和分析崩溃报告来定位问题所在，并进行相应的修复。如果你是应用的用户，遇到 crash 时可以尝试更新应用到最新版本，或者联系应用的开发者报告问题。如果你是开发者，你需要检查应用的日志和崩溃报告，找出崩溃的原因，并修复相应的代码。</li></ul></details><h2 id="_1025" tabindex="-1">1025 <a class="header-anchor" href="#_1025" aria-label="Permalink to &quot;1025&quot;">​</a></h2><ul><li>1234</li><li><a href="https://zh.javascript.info/onload-ondomcontentloaded" target="_blank" rel="noreferrer">关于 dom 加载的生命周期</a></li></ul><p>::: infos</p><p>当 DOM 准备就绪时，document 上的 DOMContentLoaded 事件就会被触发。在这个阶段，我们可以将 JavaScript 应用于元素。 诸如  或  之类的脚本会阻塞 DOMContentLoaded，浏览器将等待它们执行结束。 图片和其他资源仍然可以继续被加载。 当页面和所有资源都加载完成时，window 上的 load 事件就会被触发。我们很少使用它，因为通常无需等待那么长时间。 当用户想要离开页面时，window 上的 beforeunload 事件就会被触发。如果我们取消这个事件，浏览器就会询问我们是否真的要离开（例如，我们有未保存的更改）。 当用户最终离开时，window 上的 unload 事件就会被触发。在处理程序中，我们只能执行不涉及延迟或询问用户的简单操作。正是由于这个限制，它很少被使用。我们可以使用 navigator.sendBeacon 来发送网络请求。</p><p>document.readyState 是文档的当前状态，可以在 readystatechange 事件中跟踪状态更改：</p><ul><li>loading —— 文档正在被加载。</li><li>interactive —— 文档已被解析完成，与 DOMContentLoaded 几乎同时发生，但是在 DOMContentLoaded 之前发生。</li><li>complete —— 文档和资源均已加载完成，与 window.onload 几乎同时发生，但是在 window.onload 之前发生。</li></ul><p>:::</p><h2 id="_1026" tabindex="-1">1026 <a class="header-anchor" href="#_1026" aria-label="Permalink to &quot;1026&quot;">​</a></h2><ul><li>1235</li><li><a href="https://juejin.cn/post/7320949203542409231#heading-1" target="_blank" rel="noreferrer">GPT 自动投简历，一周斩获三 offer，开源分享！</a></li></ul><h2 id="_1028" tabindex="-1">1028 <a class="header-anchor" href="#_1028" aria-label="Permalink to &quot;1028&quot;">​</a></h2><ul><li>1237</li><li>周末看了一天的斗罗大陆，确实很神奇。但深层次的背景就是想转移注意力，让自己的注意力集中在其他事情上。这辈子估计靠现在手上的工作，很难有什么收入，而且后面一旦宝贝出生，估计也很难有什么收入，生活太艰难了</li></ul><h2 id="_1029" tabindex="-1">1029 <a class="header-anchor" href="#_1029" aria-label="Permalink to &quot;1029&quot;">​</a></h2><ul><li>1238</li><li>离线包缓存策略,仅供参考</li></ul><p>::: infos</p><p>Android 客户端和 iOS 客户端的缓存策略不同，导致离线包被命中的逻辑也不同。</p><p>iOS 的 webView 有正常的缓存，所以，离线包打进客户端以后，其实只有第一次访问会命中离线资源，一旦命中以后，就会被 webView 缓存起来，下次再访问，就走了缓存，不会再命中离线资源了。所以，在 iOS 中，离线资源也就第一次会起作用，后续再访问都走 webView 缓存了，除非用户清除缓存，清除所有数据。</p><p>Android 的 webView 没有使用缓存，每次访问 h5，都会去访问线上，如果本地有要访问的资源，就拦截请求，访问本地离线资源，没有就走线上。所以，在 Android 端，每次访问都会命中离线资源。</p><p>:::</p>`,53)]))}const g=i(h,[["render",t]]);export{o as __pageData,g as default};

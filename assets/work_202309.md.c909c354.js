import{_ as e,o as a,c as s,Q as n}from"./chunks/framework.c8c775bf.js";const u=JSON.parse('{"title":"202309","description":"","frontmatter":{},"headers":[],"relativePath":"work/202309.md","filePath":"work/202309.md"}'),t={name:"work/202309.md"},p=n(`<h1 id="_202309" tabindex="-1">202309 <a class="header-anchor" href="#_202309" aria-label="Permalink to &quot;202309&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>即将步入秋天，我还是这么菜吗</p></div><h2 id="_0901-0902" tabindex="-1">0901/0902 <a class="header-anchor" href="#_0901-0902" aria-label="Permalink to &quot;0901/0902&quot;">​</a></h2><ul><li><p>815，距离婚期还有整整一个月</p></li><li><p>多灾多难的一周，终于阔以休息下</p></li><li><p>gzip 的原理是什么，如何配置？ gzip 的核心是 Deflate(缩小)，而它使用了 LZ77 算法与 Huffman 编码来压缩文件，重复度越高的文件可压缩的空间就越大 因此 gzip 用于 HTTP 文件传输中，比如 JS、CSS 等，「但一般不会压缩图片」。在 HTTP Response 报文中，用 Content-Encoding 指明使用 gzip 压缩，而以下响应头在大部分生产环境的响应报文中都可以看到！</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">Accept-Encoding: gzip, deflate, br</span></span>
<span class="line"><span style="color:#e1e4e8;">Content-Encoding: gzip</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">Accept-Encoding: gzip, deflate, br</span></span>
<span class="line"><span style="color:#24292e;">Content-Encoding: gzip</span></span></code></pre></div><p>gzip 一般在<strong>反向代理</strong>那一层，如 nginx 进行处理，直接使用 C 语言编写，具有更好的性能。</p></li></ul><p>在 nginx 开启 gzip: 配置可参考 gzip module[4]</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">gzip on;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">gzip on;</span></span></code></pre></div>`,6),o=[p];function i(l,c,r,d,g,_){return a(),s("div",null,o)}const k=e(t,[["render",i]]);export{u as __pageData,k as default};
